/**
 * EpisodeTranscriptNote types for LLM-generated notes on podcast episodes
 * Mirrors the database schema for the episode_transcript_notes table
 */

import { BaseEntity } from './common.js';

/**
 * Represents a single set of LLM-generated notes for a podcast episode/transcript pair.
 * - Uniqueness is enforced per episode (excluding soft-deleted rows).
 * - Soft deletes are handled via the deleted_at field.
 */
export interface EpisodeTranscriptNote extends BaseEntity {
  /** UUID primary key */
  id: string;
  /** FK to podcast_episodes.id; one note per episode (enforced for non-deleted rows) */
  episode_id: string;
  /** FK to transcripts.id; links notes to the transcript used as input */
  transcript_id: string;
  /** The generated notes text (may be null if not yet generated) */
  notes: string | null;
  /** LLM model/version used to generate notes (e.g., gemini-1.5-flash) */
  model: string;
  /** Number of input tokens sent to the LLM (non-negative) */
  input_tokens: number;
  /** Number of output tokens generated by the LLM (non-negative) */
  output_tokens: number;
  /** Processing status (free-form text, e.g., pending, completed, failed) */
  status: string;
  /** Error details if note generation failed (nullable) */
  error_message: string | null;
  /** ISO 8601 timestamp (auto-set on insert) */
  created_at: string;
  /** ISO 8601 timestamp (auto-updated on update) */
  updated_at: string;
  /** Soft delete timestamp; NULL means active row. */
  deleted_at: string | null;
} 