name: Test and Deploy

permissions:
  deployments: write

on:
  push:
    branches:
      - main # Triggers tests and, if successful, deployment
      - '**' # Triggers tests on pushes to any other branch
  pull_request:
    branches:
      - main # Triggers tests on Pull Requests targeting main

jobs:
  run-tests:
    name: Run All Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Using LTS version, can be '22.x' if v22.13.0 is critical

      - name: Install dependencies (root)
        # Using npm ci is generally recommended for CI for faster, more reliable builds from the lockfile.
        # If you have issues with npm install, consider switching to npm ci.
        run: npm install

      - name: Run All Tests
        run: npm test # Runs all tests defined in your root package.json

  # NEW: Backup-Restore Migration Tests
  migration-tests:
    name: Migration & Vault Tests
    runs-on: ubuntu-latest
    needs: run-tests # Only run after basic tests pass
    
    # Only run migration tests on main branch pushes and PRs to main
    if: github.ref == 'refs/heads/main' || github.base_ref == 'main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      # Use test environment variables
      SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL || secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY }}
      NODE_ENV: test
      TEST_SECRET_COUNT: 3
      # Database URL for migration tests
      DATABASE_URL_TEST: postgresql://postgres:postgres@localhost:5432/test_db
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      - name: Install scripts dependencies
        run: |
          cd scripts
          npm install

      - name: Install pg client for migration tests
        run: |
          cd packages/server
          npm install --save-dev pg @types/pg

      - name: Set up test database with extensions
        run: |
          echo "üóÑÔ∏è Setting up test database with required extensions..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
          echo "‚úÖ Database extensions installed"

      - name: Run Migration Integration Tests
        run: |
          echo "üß™ Running migration integration tests..."
          cd packages/server
          npm run test lib/__tests__/migrations/podcast_migration.test.ts

      - name: Debug Environment Variables
        run: |
          echo "üîç Debug: Checking environment variables..."
          echo "NODE_ENV: $NODE_ENV"
          echo "SUPABASE_URL is set: ${{ secrets.SUPABASE_TEST_URL && 'true' || secrets.SUPABASE_URL && 'true' || 'false' }}"
          echo "SUPABASE_SERVICE_ROLE_KEY is set: ${{ secrets.SUPABASE_TEST_SERVICE_KEY && 'true' || secrets.SUPABASE_SERVICE_ROLE_KEY && 'true' || 'false' }}"
          echo "Available secrets (names only):"
          echo "- SUPABASE_TEST_URL exists: ${{ secrets.SUPABASE_TEST_URL && 'true' || 'false' }}"
          echo "- SUPABASE_URL exists: ${{ secrets.SUPABASE_URL && 'true' || 'false' }}"
          echo "- SUPABASE_TEST_SERVICE_KEY exists: ${{ secrets.SUPABASE_TEST_SERVICE_KEY && 'true' || 'false' }}"
          echo "- SUPABASE_SERVICE_ROLE_KEY exists: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY && 'true' || 'false' }}"

      - name: Validate Required Secrets
        run: |
          echo "üîê Validating required secrets..."
          MISSING_SECRETS=""
          
          # Check if we have either test or production Supabase URL
          if [ -z "${{ secrets.SUPABASE_TEST_URL }}" ] && [ -z "${{ secrets.SUPABASE_URL }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS SUPABASE_URL"
          fi
          
          # Check if we have either test or production Supabase service key
          if [ -z "${{ secrets.SUPABASE_TEST_SERVICE_KEY }}" ] && [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS SUPABASE_SERVICE_ROLE_KEY"
          fi
          
          if [ -n "$MISSING_SECRETS" ]; then
            echo "‚ùå Missing required GitHub secrets:$MISSING_SECRETS"
            echo ""
            echo "üîß To fix this issue:"
            echo "1. Go to your GitHub repository"
            echo "2. Navigate to Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "3. Add the following secrets:"
            echo "   - SUPABASE_URL (your Supabase project URL)"
            echo "   - SUPABASE_SERVICE_ROLE_KEY (your Supabase service role key)"
            echo "   - Optional: SUPABASE_TEST_URL and SUPABASE_TEST_SERVICE_KEY for test environment"
            echo ""
            echo "üìñ Find these values in your Supabase dashboard ‚Üí Settings ‚Üí API"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are configured"

      - name: Run Migration Validation
        run: |
          echo "üîç Running migration validation tests..."
          cd scripts
          node validate-migration.js

      - name: Run Backup-Restore Test
        run: |
          echo "üîÑ Running backup-restore test..."
          cd scripts
          node backup-restore-test.js

      - name: Upload backup artifacts (if test fails)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backup-artifacts-${{ github.sha }}
          path: backups/
          retention-days: 7

  deploy-supabase-migrations:
    name: Deploy Database Migrations
    environment: production
    runs-on: ubuntu-latest
    needs: [run-tests, migration-tests] # Run after tests pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only on push to main
    # Expose the staging project ref as an environment variable so it can
    # be referenced in conditions without directly exposing the `secrets` context.
    env:
      STAGING_PROJECT_REF: ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: '2.23.4'  # Lock to match local CLI version to avoid version mismatches



      - name: Link Supabase production project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "üîó Linking production Supabase project..."
          echo "üìã Using explicit credentials to avoid interactive prompts"
          echo "üîç Project ref length: ${#SUPABASE_PROJECT_REF}"
          echo "üîç Password length: ${#SUPABASE_DB_PASSWORD}"
          
          # Test the link with error handling
          supabase link \
            --project-ref "${{ secrets.SUPABASE_PROJECT_REF }}" \
            --password "${{ secrets.SUPABASE_DB_PASSWORD }}" || {
            echo "‚ùå Project linking failed"
            echo "üí° This could indicate:"
            echo "1. Invalid SUPABASE_PROJECT_REF (should be 20 characters)"
            echo "2. Invalid SUPABASE_DB_PASSWORD"
            echo "3. Network connectivity issues"
            echo "4. Project doesn't exist or access token is invalid"
            exit 1
          }

      - name: Check for new migrations
        id: check-migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          # Step 1: Add strict shell settings to catch failures
          set -euo pipefail
          
          echo "üîç Checking if there are new migrations to deploy..."
          
          # Step 2: Check CLI version and confirm it's working
          echo "üìã CLI version and environment check:"
          echo "CLI version: $(supabase --version)"
          echo "Working directory: $(pwd)"
          echo "Migration files present:"
          ls -la supabase/migrations/ | head -5
          
          # Step 3: Verify secrets are available (show masked lengths)
          echo "üîê Secret validation:"
          echo "SUPABASE_PROJECT_REF length: ${#SUPABASE_PROJECT_REF}"
          echo "SUPABASE_DB_PASSWORD length: ${#SUPABASE_DB_PASSWORD}"
          echo "SUPABASE_ACCESS_TOKEN length: ${#SUPABASE_ACCESS_TOKEN}"
          
          # Validate required secrets exist
          if [ -z "$SUPABASE_PROJECT_REF" ]; then
            echo "‚ùå SUPABASE_PROJECT_REF is missing"
            exit 1
          fi
          if [ -z "$SUPABASE_DB_PASSWORD" ]; then
            echo "‚ùå SUPABASE_DB_PASSWORD is missing"
            exit 1
          fi
          
          # Step 4: GitHub Actions IPv6 Compatibility Check
          echo "üåê GitHub Actions IPv6 Compatibility Info:"
          echo "üìã GitHub Actions doesn't support IPv6 connections to Supabase databases"
          echo "‚úÖ Using Supabase CLI with linked project (routes via Supavisor - IPv4 compatible)"
          echo "üìñ Reference: https://supabase.com/docs/guides/troubleshooting/supabase--your-network-ipv4-and-ipv6-compatibility-cHe3BP"
          
          # Step 5: Use Supabase CLI (IPv4-compatible via Supavisor after linking)
          echo "üîç Checking migrations using linked project (IPv4-compatible)..."
          
          # The CLI uses the linked project which routes through Supavisor (IPv4-compatible)
          echo "üìã Getting migration status via Supabase CLI..."
          
          # Check staging migrations (if configured)
          STAGING_NEEDS_MIGRATION=false
          if [ -n "${{ env.STAGING_PROJECT_REF }}" ]; then
            echo "Checking staging environment for new migrations..."
            echo "‚ö†Ô∏è Staging check requires separate linking - skipping for now"
            echo "üí° To enable staging checks, implement separate staging project linking"
            STAGING_NEEDS_MIGRATION=false
          else
            echo "‚è≠Ô∏è Staging environment not configured, skipping check"
          fi
          
                    # Get production migration status using linked project
          echo "üîç Checking production migrations via linked project..."
          
          # Use --linked flag to check the linked project (this should work after linking)
          PRODUCTION_OUTPUT=$(supabase migration list --linked 2>&1) || {
            echo "‚ùå Migration list failed - this indicates a linking or connectivity issue"
            echo "üîç Output was:"
            echo "$PRODUCTION_OUTPUT"
            echo ""
            echo "üí° Possible solutions:"
            echo "1. Project linking may have failed in the previous step"
            echo "2. Verify SUPABASE_PROJECT_REF secret is correct (length: ${#SUPABASE_PROJECT_REF})"
            echo "3. Verify SUPABASE_DB_PASSWORD secret is correct (length: ${#SUPABASE_DB_PASSWORD})"
            echo "4. Check if database password was recently changed in Supabase dashboard"
            echo "5. Verify project exists and is accessible with the access token"
            exit 1
          }
          
          echo "üìã Raw migration list output:"
          echo "$PRODUCTION_OUTPUT"
          echo "--- End of raw output ---"
          
          PRODUCTION_NEEDS_MIGRATION=false
          # Look for migrations with empty Remote column (indicating pending migrations)
          if echo "$PRODUCTION_OUTPUT" | grep -q "^[[:space:]]*[0-9]\{14\}[[:space:]]*|[[:space:]]*|"; then
            echo "üìã Found migrations pending for production"
            echo "Pending migrations:"
            echo "$PRODUCTION_OUTPUT" | grep "^[[:space:]]*[0-9]\{14\}[[:space:]]*|[[:space:]]*|"
            PRODUCTION_NEEDS_MIGRATION=true
          else
            echo "‚úÖ Production is up to date (no pending migrations found)"
          fi
          
          # Set outputs for conditional steps
          echo "staging-needs-migration=$STAGING_NEEDS_MIGRATION" >> $GITHUB_OUTPUT
          echo "production-needs-migration=$PRODUCTION_NEEDS_MIGRATION" >> $GITHUB_OUTPUT
          
          # Summary
          if [ "$STAGING_NEEDS_MIGRATION" = "true" ] || [ "$PRODUCTION_NEEDS_MIGRATION" = "true" ]; then
            echo "üöÄ Migration deployment will proceed"
            echo "needs-migration=true" >> $GITHUB_OUTPUT
          else
            echo "‚è≠Ô∏è No migrations needed, skipping deployment steps"
            echo "needs-migration=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy migrations to staging (if configured)
        # Only deploy if staging is configured AND has new migrations to apply
        if: ${{ env.STAGING_PROJECT_REF && steps.check-migrations.outputs.staging-needs-migration == 'true' }}
        run: |
          echo "üöÄ Deploying migrations to staging environment..."
          supabase db push --project-ref ${{ env.STAGING_PROJECT_REF }} --password ${{ secrets.SUPABASE_STAGING_DB_PASSWORD }}
          echo "‚úÖ Staging migrations deployed successfully"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Skip staging deployment (no new migrations)
        if: ${{ env.STAGING_PROJECT_REF && steps.check-migrations.outputs.staging-needs-migration == 'false' }}
        run: |
          echo "‚úÖ Staging environment is up to date - no new migrations to deploy"

      - name: Deploy migrations to production
        # Only deploy if production has new migrations to apply
        if: ${{ steps.check-migrations.outputs.production-needs-migration == 'true' }}
        run: |
          echo "üöÄ Deploying migrations to production environment..."
          
          # Try deployment with retry logic for connectivity issues
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Use explicit password flag to avoid interactive prompts
            if supabase db push --linked --password "${{ secrets.SUPABASE_DB_PASSWORD }}"; then
              echo "‚úÖ Production migrations deployed successfully"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Deployment attempt $RETRY_COUNT failed, retrying in 30 seconds..."
                sleep 30
              else
                echo "‚ùå All deployment attempts failed"
                echo "üîç This could be due to:"
                echo "1. Authentication issue - SASL auth failed"
                echo "2. Incorrect SUPABASE_DB_PASSWORD secret"
                echo "3. Database password may have been changed in Supabase dashboard"
                echo "4. Project linking credentials mismatch"
                echo ""
                echo "üí° Check your SUPABASE_DB_PASSWORD secret in GitHub repository settings"
                echo "üîß You can reset the database password in Supabase Dashboard ‚Üí Settings ‚Üí Database"
                exit 1
              fi
            fi
          done
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Skip production deployment (no new migrations)
        if: ${{ steps.check-migrations.outputs.production-needs-migration == 'false' }}
        run: |
          echo "‚úÖ Production environment is up to date - no new migrations to deploy"

      - name: Verify migration deployment
        # Only run verification if migrations were actually deployed
        if: ${{ steps.check-migrations.outputs.needs-migration == 'true' }}
        env:
          STAGING_PROJECT_REF: ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
          PRODUCTION_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          echo "üîç Verifying migration deployment..."
          echo "Migration deployment completed. Please check Supabase dashboard for confirmation:"
          if [ -n "$STAGING_PROJECT_REF" ]; then
            echo "- Staging: https://supabase.com/dashboard/project/$STAGING_PROJECT_REF"
          else
            echo "- Staging: not-configured"
          fi
          echo "- Production: https://supabase.com/dashboard/project/$PRODUCTION_PROJECT_REF"
          echo ""
          echo "üìä To monitor migration success:"
          echo "1. Check the 'Database' tab in Supabase dashboard"
          echo "2. Verify new tables exist: podcast_shows, podcast_episodes, user_podcast_subscriptions"
          echo "3. Check migration history in the 'Migrations' section"
          echo "4. Monitor application logs for any schema-related errors"
          echo "5. Run a quick smoke test on the deployed application"

      - name: Migration deployment summary
        if: ${{ steps.check-migrations.outputs.needs-migration == 'false' }}
        run: |
          echo "üìã Migration Deployment Summary"
          echo "==============================="
          echo "‚úÖ All environments are up to date"
          echo "‚è≠Ô∏è No database migrations were deployed"
          echo ""
          echo "This is normal when:"
          echo "‚Ä¢ No new migration files have been added since the last deployment"
          echo "‚Ä¢ All existing migrations have already been applied to both environments"
          echo ""
          echo "The deployment will continue with application updates only."

  deploy-vercel:
    name: Deploy to Vercel
    environment: production
    runs-on: ubuntu-latest
    needs: [run-tests, migration-tests, deploy-supabase-migrations] # Deploy after migrations
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only on push to main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel config
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build and deploy to Vercel
        run: |
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy-render:
    name: Deploy to Render
    environment: production
    runs-on: ubuntu-latest
    needs: [run-tests, migration-tests, deploy-supabase-migrations, deploy-vercel] # Deploy after migrations and Vercel
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only on push to main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to Render
        uses: JorgeLNJunior/render-deploy@v1.4.5
        with:
          service_id: ${{ secrets.RENDER_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          github_deployment: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          deployment_environment: 'production'