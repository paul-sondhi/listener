name: Test and Deploy

permissions:
  deployments: write

on:
  push:
    branches:
      - main # Triggers tests and, if successful, deployment
      - '**' # Triggers tests on pushes to any other branch
  pull_request:
    branches:
      - main # Triggers tests on Pull Requests targeting main

jobs:
  run-tests:
    name: Run All Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Using LTS version, can be '22.x' if v22.13.0 is critical

      - name: Install dependencies (root)
        # Using npm ci is generally recommended for CI for faster, more reliable builds from the lockfile.
        # If you have issues with npm install, consider switching to npm ci.
        run: npm install

      - name: Run All Tests
        run: npm test # Runs all tests defined in your root package.json

  # NEW: Backup-Restore Migration Tests
  migration-tests:
    name: Migration & Vault Tests
    runs-on: ubuntu-latest
    needs: run-tests # Only run after basic tests pass
    
    # Only run migration tests on main branch pushes and PRs to main
    if: github.ref == 'refs/heads/main' || github.base_ref == 'main'
    
    env:
      # Use test environment variables
      SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL || secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY }}
      NODE_ENV: test
      TEST_SECRET_COUNT: 3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      - name: Install scripts dependencies
        run: |
          cd scripts
          npm install

      - name: Debug Environment Variables
        run: |
          echo "üîç Debug: Checking environment variables..."
          echo "NODE_ENV: $NODE_ENV"
          echo "SUPABASE_URL is set: ${{ secrets.SUPABASE_TEST_URL != '' || secrets.SUPABASE_URL != '' }}"
          echo "SUPABASE_SERVICE_ROLE_KEY is set: ${{ secrets.SUPABASE_TEST_SERVICE_KEY != '' || secrets.SUPABASE_SERVICE_ROLE_KEY != '' }}"
          echo "Available secrets (names only):"
          echo "- SUPABASE_TEST_URL exists: ${{ secrets.SUPABASE_TEST_URL != '' }}"
          echo "- SUPABASE_URL exists: ${{ secrets.SUPABASE_URL != '' }}"
          echo "- SUPABASE_TEST_SERVICE_KEY exists: ${{ secrets.SUPABASE_TEST_SERVICE_KEY != '' }}"
          echo "- SUPABASE_SERVICE_ROLE_KEY exists: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY != '' }}"

      - name: Validate Required Secrets
        run: |
          echo "üîê Validating required secrets..."
          MISSING_SECRETS=""
          
          if [ -z "${{ secrets.SUPABASE_TEST_URL || secrets.SUPABASE_URL }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS SUPABASE_URL"
          fi
          
          if [ -z "${{ secrets.SUPABASE_TEST_SERVICE_KEY || secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS SUPABASE_SERVICE_ROLE_KEY"
          fi
          
          if [ -n "$MISSING_SECRETS" ]; then
            echo "‚ùå Missing required GitHub secrets:$MISSING_SECRETS"
            echo ""
            echo "üîß To fix this issue:"
            echo "1. Go to your GitHub repository"
            echo "2. Navigate to Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "3. Add the following secrets:"
            echo "   - SUPABASE_URL (your Supabase project URL)"
            echo "   - SUPABASE_SERVICE_ROLE_KEY (your Supabase service role key)"
            echo "   - Optional: SUPABASE_TEST_URL and SUPABASE_TEST_SERVICE_KEY for test environment"
            echo ""
            echo "üìñ Find these values in your Supabase dashboard ‚Üí Settings ‚Üí API"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are configured"

      - name: Run Migration Validation
        run: |
          echo "üîç Running migration validation tests..."
          cd scripts
          node validate-migration.js

      - name: Run Backup-Restore Test
        run: |
          echo "üîÑ Running backup-restore test..."
          cd scripts
          node backup-restore-test.js

      - name: Upload backup artifacts (if test fails)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backup-artifacts-${{ github.sha }}
          path: backups/
          retention-days: 7

  deploy-vercel:
    name: Deploy to Vercel
    environment: production
    runs-on: ubuntu-latest
    needs: [run-tests, migration-tests] # Now depends on migration tests too
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only on push to main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel config
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build and deploy to Vercel
        run: |
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy-render:
    name: Deploy to Render
    environment: production
    runs-on: ubuntu-latest
    needs: [run-tests, migration-tests, deploy-vercel] # Include migration tests in dependencies
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only on push to main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to Render
        uses: JorgeLNJunior/render-deploy@v1.4.5
        with:
          service_id: ${{ secrets.RENDER_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          github_deployment: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          deployment_environment: 'production'